turking/354637	null	tell me the weather at home and then make my speaker the default audio .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.speaker.set_sink ;
turking/354639	null	set my speaker to be the default audio output and show the current weather for home .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.speaker.set_sink ;
turking/355560	null	show the current weather for work if the weather is sunny then turn on my security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current param:location = location:work ) filter param:status == enum:sunny => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/355561	null	show the current weather for at work if it is sunny then turn on my security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current param:location = location:work ) filter param:status == enum:sunny => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/356186	null	show the weather , then turn off the security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:off ;
turking/356189	null	show the current weather for my home then turn on my security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/356192	null	show the current weather for home then turn on my security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/356194	null	show weather then turn on my security camera	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.current param:location = location:home => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/356405	null	turn on my security camera if a random number between 0 and 1 is less than NUMBER_0	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.builtin.thingengine.builtin.get_random_between ) filter param:random <= NUMBER_0 => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/356523	null	find the sun time information for my location then set the volume on my speakers to a percent of the value .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.sunrise param:location = location:current_location => notify ; now => @org.thingpedia.iot.speaker.set_volume ;
turking/356524	null	find out sun time info here , then turn volume on my speaker to some percent .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.sunrise param:location = location:current_location => notify ; now => @org.thingpedia.iot.speaker.set_volume ;
turking/356525	null	set speaker to some value when getting sun time info	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.sunrise => notify ; now => @org.thingpedia.iot.speaker.set_volume ;
turking/357637	null	loop the colors on my light bulb if humidity is less than NUMBER_0 .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.humidity.humidity ) filter param:value <= NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.color_loop ;
turking/357642	null	check and notate the thermostat 's reported humidity level in the case of value dropping below NUMBER_0 and when that 's done , start looping my light bulb colors	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.iot.humidity.humidity => notify ; now => @org.thingpedia.iot.light-bulb.color_loop ;
turking/357647	null	if humidity on my thermostat reads under NUMBER_0 then adjust my light bulb to loop colors	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.humidity.humidity ) filter param:value <= NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.color_loop ;
turking/357651	null	if the humidity reported by the thermostat is less than NUMBER_0 , loop the colors on my light bulb .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.humidity.humidity ) filter param:value <= NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.color_loop ;
turking/357656	null	if the thermostat 's value is less than NUMBER_0 , record the humidity and loop the light bulb 's colors .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.humidity.humidity ) filter param:value <= NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.color_loop ;
turking/357688	null	find moon phase for work and turn on my camera	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.moon param:location = location:work => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/357693	null	turn off my security camera after getting the moon phase for at work	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.moon param:location = location:work => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/357698	null	get the moon phase and turn on my security camera at work	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.moon param:location = location:work => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/358012	null	report the sun time info at work for the date DATE_0 and then turn on my security camera .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.sunrise param:date = DATE_0 param:location = location:work => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/358020	null	turn on my security camera after getting the sun time info for work on DATE_0	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.sunrise param:date = DATE_0 param:location = location:work => notify ; now => @org.thingpedia.iot.security-camera.set_power param:power = enum:on ;
turking/358756	null	find a random integer starting from the number NUMBER_0 . decrease my speaker volume .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.builtin.thingengine.builtin.get_random_between param:low = NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.lower_volume ;
turking/359497	null	lower volume on my speaker after getting a random integer between some value and NUMBER_0	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.builtin.thingengine.builtin.get_random_between param:high = NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.lower_volume ;
turking/359500	null	find a random integer between NUMBER_0 and another value then decrease the volume on my speaker .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.builtin.thingengine.builtin.get_random_between param:high = NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.lower_volume ;
turking/373343	null	check if my heating system is in the state of cooling then turn up the volume on my speaker	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373345	null	check the state of the heating system and if it is cooling increase my speaker volume	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373346	null	if the heating system is cooling when it is checked increase the volume on my speaker	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373347	null	my speaker volume will go up if my heater cools down .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373348	null	when my heating system cools down i will turn up my speakers .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373351	null	stop cooling by increasing the volume of the speaker	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.iot.thermostat.get_hvac_state ) filter param:state == enum:cooling => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373353	null	turn off my light bulb after showing weather where fog is NUMBER_0 and cloudiness is greater than NUMBER_1	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:cloudiness >= NUMBER_1 and param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.set_power param:power = enum:off ;
turking/373354	null	turn off my light once you have shown the weather where fog is NUMBER_0 and cloudiness is over NUMBER_1	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:cloudiness >= NUMBER_1 and param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.set_power param:power = enum:off ;
turking/373355	null	shut off my light if fog is NUMBER_0 and cloudiness is more than NUMBER_1 as you show me the weather	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:cloudiness >= NUMBER_1 and param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.set_power param:power = enum:off ;
turking/373356	null	turn off lamp if the current weather for some place has fog of NUMBER_0 and cloudiness is bigger than NUMBER_1	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:cloudiness >= NUMBER_1 and param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.set_power param:power = enum:off ;
turking/373357	null	show the current weather and if the fog is NUMBER_0 and the cloudiness is above NUMBER_1 then turn off my light bulb .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:cloudiness >= NUMBER_1 and param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.light-bulb.set_power param:power = enum:off ;
turking/373800	null	please show the current weather and if fog it at NUMBER_0 , then turn the volume up on my speaker	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373801	null	look up the weather , if fog is at NUMBER_0 , turn the volume up on my speaker	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current ) filter param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/373802	null	when fog for my locations is NUMBER_0 , turn my speaker up .	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => ( @org.thingpedia.weather.current param:location = location:current_location ) filter param:fog == NUMBER_0 => notify ; now => @org.thingpedia.iot.speaker.raise_volume ;
turking/374272	null	get the moon phase for a place with the date of DATE_0 then set my speaker to be the default audio output	$dialogue @org.thingpedia.dialogue.transaction.execute ; now => @org.thingpedia.weather.moon param:date = DATE_0 => notify ; now => @org.thingpedia.iot.speaker.set_sink  
